{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { invitation } from \"@xmtp/proto\";\nimport Long from \"long\";\n\n/**\n *\n * @param peerAddress - Ethereum address of the broadcaster\n * @param timestampMs - Timestamp in milliseconds used in the signature\n * @returns\n */\nexport const createConsentMessage = (\n  peerAddress: string,\n  timestampMs: number,\n): string =>\n  \"XMTP : Grant inbox consent to sender\\n\" +\n  \"\\n\" +\n  `Current Time: ${new Date(timestampMs).toUTCString()}\\n` +\n  `From Address: ${peerAddress}\\n` +\n  \"\\n\" +\n  \"For more info: https://xmtp.org/signatures/\";\n\n/**\n *\n * @param signature hex string of the signature\n * @param timestampMs timestamp in milliseconds used in the signature\n * @returns Uint8Array of the consent proof payload\n */\nexport const createConsentProofPayload = (\n  signature: string,\n  timestampMs: number,\n): Uint8Array =>\n  invitation.ConsentProofPayload.encode({\n    signature,\n    timestamp: Long.fromNumber(timestampMs),\n    payloadVersion:\n      invitation.ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1,\n  }).finish();\n"],"names":["createConsentMessage","peerAddress","timestampMs","Date","toUTCString","createConsentProofPayload","signature","invitation","ConsentProofPayload","encode","timestamp","Long","fromNumber","payloadVersion","ConsentProofPayloadVersion","CONSENT_PROOF_PAYLOAD_VERSION_1","finish"],"mappings":"6DASa,MAAAA,EAAuB,CAClCC,EACAC,IAIA,yDAAiB,IAAIC,KAAKD,GAAaE,gCACtBH,mDAUNI,EAA4B,CACvCC,EACAJ,IAEAK,EAAWC,oBAAoBC,OAAO,CACpCH,YACAI,UAAWC,EAAKC,WAAWV,GAC3BW,eACEN,EAAWO,2BAA2BC,kCACvCC"}