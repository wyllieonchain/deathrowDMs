{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { invitation } from \"@xmtp/proto\";\nimport Long from \"long\";\n\n/**\n *\n * @param peerAddress - Ethereum address of the broadcaster\n * @param timestampMs - Timestamp in milliseconds used in the signature\n * @returns\n */\nexport const createConsentMessage = (\n  peerAddress: string,\n  timestampMs: number,\n): string =>\n  \"XMTP : Grant inbox consent to sender\\n\" +\n  \"\\n\" +\n  `Current Time: ${new Date(timestampMs).toUTCString()}\\n` +\n  `From Address: ${peerAddress}\\n` +\n  \"\\n\" +\n  \"For more info: https://xmtp.org/signatures/\";\n\n/**\n *\n * @param signature hex string of the signature\n * @param timestampMs timestamp in milliseconds used in the signature\n * @returns Uint8Array of the consent proof payload\n */\nexport const createConsentProofPayload = (\n  signature: string,\n  timestampMs: number,\n): Uint8Array =>\n  invitation.ConsentProofPayload.encode({\n    signature,\n    timestamp: Long.fromNumber(timestampMs),\n    payloadVersion:\n      invitation.ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1,\n  }).finish();\n"],"names":["invitation"],"mappings":";;;;;AAGA;;;;;AAKG;AACU,MAAA,oBAAoB,GAAG,CAClC,WAAmB,EACnB,WAAmB,KAEnB,wCAAwC;IACxC,IAAI;IACJ,CAAiB,cAAA,EAAA,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAI,EAAA,CAAA;AACxD,IAAA,CAAA,cAAA,EAAiB,WAAW,CAAI,EAAA,CAAA;IAChC,IAAI;AACJ,IAAA;AAEF;;;;;AAKG;AACU,MAAA,yBAAyB,GAAG,CACvC,SAAiB,EACjB,WAAmB,KAEnBA,gBAAU,CAAC,mBAAmB,CAAC,MAAM,CAAC;IACpC,SAAS;AACT,IAAA,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;AACvC,IAAA,cAAc,EACZA,gBAAU,CAAC,0BAA0B,CAAC,+BAA+B;CACxE,CAAC,CAAC,MAAM;;;;;"}